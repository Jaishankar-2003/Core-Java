Collection Interface in Java
====================================

Collection interface in Java is the root interface of the Java Collection Framework (JCF).

It defines a group of objects known as elements and provides basic operations for working with them.

The interface is part of the java.util package

forms the foundation for most collection classes, including List, Set, and Queue.


@@@@@@@
Root interface of all standard collections.
Not directly implemented. Instead, subclasses like ArrayList, HashSet, and LinkedList implement it


Sub-Interfaces of Collection Interface
-----------------------------------------
1. List :

List represents an ordered collection that allows duplicates.
                            -----------------------------------
Elements can be accessed by index.
Implementing Classes: **** ArrayList, LinkedList, Vector, Stack. ****
                           ======================================

2. Set
Set represents an unordered collection with no duplicate elements.
                            -----------------------------------------
Implementing Classes: *** HashSet, TreeSet, LinkedHashSet, EnumSet, CopyOnWriteArraySet. ***
                        =================================================================

3. SortedSet
SortedSet extends Set and maintains elements in a sorted order.
                  -----------------------------------------------
Provides methods to handle range-based operations.
Implementing Class: TreeSet.
                   ==========

4. NavigableSet
NavigableSet extends SortedSet and provides navigation methods like lower(), floor(), ceiling(), and higher().
                    ------------------------------------------------------------------------------------------
Implementing Class: TreeSet.
                    =========

5. Queue

Queue represents a collection following FIFO (First-In-First-Out) order.

Implementing Classes: PriorityQueue, Deque, ArrayDeque, LinkedList
                      =============================================

5. Deque
Deque extends Queueallows elements to be added/removed from both ends.
              ----------------------------------------------==============
Implementing Classes: ArrayDeque, LinkedList.
                     ==========================

================================================================================================================================
Array List
================

1. ArrayList(): This constructor is used to build an empty array list.

ArrayList<Integer> arr = new ArrayList<>();

2. ArrayList(Collection c): This constructor is used to build an array list initialized with the elements from the collection c.

ArrayList<String> arr = new ArrayList<>(collection);

3. ArrayList(int capacity): This constructor is used to build an array list with the initial capacity being specified.

ArrayList<Double> arr = new ArrayList<>(20);

Advantages of Java ArrayList
----------------------------------
 1 . Dynamic size
 2 . Easy to use
 3 . Fast access
 4 . Ordered collection
 5 . Supports null values


 Linked List
 --------------
 LinkedList<String> l = new LinkedList<String>();

 A linked list can dynamically grow or shrink in size as needed.
 Adding or removing elements in the middle is efficient since only links need to be updated.
 Doubly linked lists allow traversal in both forward and backward directions.


=====================================================================================================================================



























